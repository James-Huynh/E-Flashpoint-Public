package managers;

// Start of user code for imports
import java.util.*;
// End of user code

import actions.Action;
import game.GameState;
import tile.Tile;
import token.POI;

/**
 * GameManager class definition.
 * Generated by the TouchCORE code generator.
 * modified by @matekrk
 */
public class GameManager {
    
	private final GameState gs = GameState.getInstance();
	
    public void explosion(Tile target) {
        /* TODO: No message view defined */
    }

    public void resolveFlashOver() {
        /* TODO: No message view defined */
    }

    public void checkKnockDowns() {
        /* TODO: No message view defined */
    }

    public void placePOI() {
        boolean flag = true;
        while (flag) {
        	Tile t = gs.rollForTile();
        	if (t.getFire()==0) {
        		flag = false;
        		POI newPOI = gs.generatePOI();
        		t.addPoi(newPOI);
        		gs.updatePOI(newPOI);
        	}
        }
    }

    public void advanceFire() {
        /* TODO: No message view defined */
    }

    public void takeATurn() {
    	ArrayList<Action> availableActions = getAllAvailableActions();
    	// pass to GUI
    	// GUI passes which action
    	// perform 
    	// if it was end of turn die, if not recursion (but GameState is different now!)
    	
    }

    //TODO: Zaid + Mat based on validations
    public ArrayList<Action> getAllAvailableActions() {
        /* TODO: No message view defined */
        return null;
    }

    public void setup() {
    	// we have board at this stage
    	// in order:
    	// DOOR, FIRE, POI, DAMAGE_TOKENS, PLAYERS' POSITION
    	
        /* TODO: No message view defined */
    }

    //This one I save for our next meeting. key word *serialization*
    public void saveGame() {
        /* TODO: No message view defined */
    }

    //any volunteers? I guess we can do that when GUI is done
    public void setOptions() {
        /* TODO: No message view defined */
    }

    
    public void doTurns() {
    	while(!gs.isGameTerminated()) {
    		gs.getPlayingFirefighter().setAP( Math.min(6, gs.getPlayingFirefighter().getAP() + 4) );
    		takeATurn();
    		advanceFire();
    		gs.setActiveFireFighterIndex( (gs.getActiveFireFighterIndex() + 1)%(gs.getFireFighterList().size()) );
    	}
    	System.out.println(gs.isGameWon());
    }
    
    // MAIN
    public void runFlashpoint() {
    	gs.updateGameStateFromLobby();
    	setup();
    	doTurns();
    }
}
