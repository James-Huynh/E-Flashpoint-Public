package m5_final;

// Start of user code for imports
import java.util.*;
// End of user code

/**
 * Move class definition.
 * Generated by the TouchCORE code generator.
 * and modified by @matekrk
 */
public class Move extends Action {
    
    protected int direction;
    
    public int getDirection() {
        return direction;
    }

    public boolean validate() {
        boolean flag = false;
        Firefighter playingFirefighter = availableActions.getPlayingFirefighter();
        Tile currPosition = playingFirefighter.getCurrPosition();
        currPosition = location;
        playingFirefighter = Firefighters;
        Edge edge = currPosition.getEdge(this.direction);
        Tile neighbour = currPosition.getNeighbour(this.direction);
        /*
        neighbour = target;
        edge = edges;
        BlankEdge typeDoor = edge.getType();
        Wall typeEmpty = edge.getType();
        Door typeWall = edge.getType();
        if (if typeDoor == 'Door') {
            boolean status = typeWall.getStatus();
            if (if status == true) {
                int fire = neighbour.getFire();
                int aP = playingFirefighter.getAP();
                if (if fire < 2) {
                    if (if carry == true and aP >= 2) {
                        flag = true;
                    }
                }
            }
        }
        */
        if (edge.isDoor) {
        	boolean status = edge.getStatus();
        	if(status == true) {
        		int fire = traget.getFire();
        		int aP = playingFirefighter.getAP();
        		if (fire < 2) {
        			if (carry == true && aP >= 2) {
        				flag = true;
        			}
        		}
        	}
        }
        return flag;
    }

    public void perform() {
        Firefighter playingFirefighter = availableActions.getPlayingFirefighter();
        Tile currPosition = playingFirefighter.getCurrPosition();
        int aP = playingFirefighter.getAP();
        playingFirefighter.setSavedAP();
        Tile neighbour = currPosition.getNeighbour(this.direction);
        playingFirefighter.setCurrPosition(neighbour);
        boolean carrying = playingFirefighter.getCarrying();
        if (if carrying == True) {
            POI pOIList = currPosition.getPOIList();
            currPosition.setPOI(pOIList);
            neighbour.setPOI(pOIList);
        }
    }
}
