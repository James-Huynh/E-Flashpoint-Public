package actions;

import edge.Edge;
import game.GameState;
import tile.Tile;
import token.Firefighter;
import token.Speciality;

/**
 * Extinguish class definition.
 * Generated by the TouchCORE code generator.
 * and modified by @matekrk
 */
public class Extinguish extends Action {
    
	protected int direction;
    protected ActionList title = ActionList.Extinguish;
    private static final long serialVersionUID = 1L;
    
    public Extinguish() {
    	this.APcost = 1;
    }
    
    public Extinguish(int direction, int cost) {
    	this.direction = direction;
    	this.APcost = cost;
    }
    
    /*
     * GETTERS
     */
    
    public int getDirection() {
        return direction;
    }
    
    public ActionList getTitle() {
    	return this.title;
    }

    /*
     * @OVERRIDE
     */
    
    @Override
    public boolean validate(GameState gs) {
        boolean flag = false;
        Firefighter playingFirefighter = gs.getPlayingFirefighter();
        int extraPoints = 0;
        if (playingFirefighter.getSpeciality() == Speciality.CAFS) {
        	extraPoints = playingFirefighter.getSP();
        }
        int aP = playingFirefighter.getAP();
        Tile currentPosition = playingFirefighter.getCurrentPosition();
        Tile neighbour = gs.getNeighbour(currentPosition, this.direction);
        if(neighbour == null) { //If exterior, this direction isn't valid
        	return false;
        }
        int cost = this.APcost; //help variable: all FFs now have the same measure of determining how much to estinguish, but different APcost
        if (playingFirefighter.getSpeciality() == (Speciality.PARAMEDIC) || 
        		playingFirefighter.getSpeciality() == (Speciality.RESCUE_SPECIALIST)) {
        	cost /= 2;
        }
        
        int fire = neighbour.getFire();

        //smart anticipation
        if(fire > 0 && currentPosition.getFire() == 2 && neighbour != currentPosition && aP + extraPoints == cost) {
        	return false;
        }
        
        if (fire >= 1 && fire >= cost) { 
            if (currentPosition.equals(neighbour)) { //in other words: direction -1
                if (aP + extraPoints >= cost) {
                    flag = true;
                }
            }
            else {
            	Edge edge = currentPosition.getEdge(this.direction);
            	if (edge.isBlank()) {
                    if (aP + extraPoints >= cost) {
                        flag = true;
                    }
            	}
            	else if (edge.isDoor()) {
                    boolean status = edge.getStatus();
                    if (status == true || edge.isDestroyed()) {
                        if (aP + extraPoints >= cost) {
                            flag = true;
                        }
                    }
                } 
            	else if (edge.isWall()) { 
                    int damage = edge.getDamage();
                    if (damage == 0) {
                        if (aP + extraPoints >= cost) {
                            flag = true;
                        }
                    }
                }
            }
        } 
        return flag;
    }

    @Override
    public void perform(GameState gs) {
        Firefighter playingFirefighter = gs.getPlayingFirefighter();
        int aP = playingFirefighter.getAP();
        
        if (playingFirefighter.getSpeciality() == Speciality.CAFS) {
        	if (playingFirefighter.getSP() >= APcost) {
        		playingFirefighter.setSP(playingFirefighter.getSP() - APcost);
        	}
        	else if (playingFirefighter.getSP() > 0) {
        		int difference = APcost - playingFirefighter.getSP();
        		playingFirefighter.setSP(0);
        		playingFirefighter.setAP(playingFirefighter.getAP() - difference);
        	}
        	else {
        		playingFirefighter.setAP(aP - this.APcost);
        	}
        }
        else {
        	playingFirefighter.setAP(aP - this.APcost);
        }
        
        Tile currentPosition = playingFirefighter.getCurrentPosition();
        Tile neighbour = gs.getNeighbour(currentPosition, direction);
        int prevFire = neighbour.getFire();
        if (playingFirefighter.getSpeciality() == (Speciality.PARAMEDIC) || 
        		playingFirefighter.getSpeciality() == (Speciality.RESCUE_SPECIALIST)) {
        	neighbour.setFire(prevFire - this.APcost/2);
        }
        else {
        	neighbour.setFire(prevFire - this.APcost);
        }
    }	
    
	@Override
	public void adjustAction(GameState gs) {
		Speciality s = gs.getPlayingFirefighter().getSpeciality();
		if (s == (Speciality.PARAMEDIC) || s == (Speciality.RESCUE_SPECIALIST)) {
			this.APcost = 2*this.APcost;
		}
	}

	@Override
	public String toString() {
		return "Extinguish [direction=" + direction + ", title=" + title + ", APcost=" + APcost + "]";
	}
	
    
}
